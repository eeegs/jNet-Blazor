// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace jNet.Blazor.Parts.Form
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\sscot\OneDrive\Development Files\Projects\jNet\jNet.Blazor.Parts\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\sscot\OneDrive\Development Files\Projects\jNet\jNet.Blazor.Parts\Form\InputColor.razor"
using System.Drawing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\sscot\OneDrive\Development Files\Projects\jNet\jNet.Blazor.Parts\Form\InputColor.razor"
using System.Text.RegularExpressions;

#line default
#line hidden
#nullable disable
    public partial class InputColor : InputBase<Color>
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 5 "C:\Users\sscot\OneDrive\Development Files\Projects\jNet\jNet.Blazor.Parts\Form\InputColor.razor"
       

    public static string ColorToString(Color value) => $"#{value.R:x2}{value.G:x2}{value.B:x2}";

    protected override string FormatValueAsString(Color value) => ColorToString(value);

    static byte HexStringToByte(string hex)
    {
        const string HexChars = "0123456789abcdef";
        hex = hex.ToLowerInvariant();
        int result = (HexChars.IndexOf(hex[0]) * 16) + HexChars.IndexOf(hex[1]);
        return (byte)result;
    }


    static Regex Regex = new Regex("^#([0-9a-f]{2}){3}$", RegexOptions.Compiled | RegexOptions.IgnoreCase);

    protected override bool TryParseValueFromString(string value, out Color result, out string validationErrorMessage)
    {
        validationErrorMessage = null;
        Match match = Regex.Match(value);
        if (!match.Success)
        {
            validationErrorMessage = "Not a valid color code";
            result = Color.Red;
            return false;
        }

        byte r = HexStringToByte(match.Groups[1].Captures[0].Value);
        byte g = HexStringToByte(match.Groups[1].Captures[1].Value);
        byte b = HexStringToByte(match.Groups[1].Captures[2].Value);

        result = Color.FromArgb(r, g, b);
        return true;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
