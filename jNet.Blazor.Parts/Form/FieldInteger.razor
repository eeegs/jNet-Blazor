@using System.Globalization;
@using System.Diagnostics.CodeAnalysis
@typeparam TValue
@inherits MyInputBase<TValue>
<label for="@Id">@Label</label>
<input type=@Type @attributes=Attributes class=@CssClass @bind=CurrentValueAsString />
@code {
    [Parameter] public string ParsingErrorMessage { get; set; } = "The {0} field must be a number.";
    [Parameter] public IntergerType Type { get; set; } = IntergerType.Number;
    [Parameter] public int? Step { get; set; }

    private readonly static string _stepAttributeValue; // Null by default, so only allows whole numbers as per HTML spec

    static FieldInteger()
    {

        // Unwrap Nullable<T>, because InputBase already deals with the Nullable aspect
        // of it for us. We will only get asked to parse the T for nonempty inputs.
        var targetType = Nullable.GetUnderlyingType(typeof(TValue)) ?? typeof(TValue);
        if (targetType == typeof(int) ||
            targetType == typeof(long) ||
            targetType == typeof(short) ||
            targetType == typeof(byte))
        {
            _stepAttributeValue = "any";
        }
        else
        {
            throw new InvalidOperationException($"The type '{targetType}' is not a supported numeric type.");
        }
    }

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out TValue result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        var fixedVal = new string((value ?? "").Where(Char.IsDigit).ToArray());

        if (BindConverter.TryConvertTo<TValue>(fixedVal, CultureInfo.InvariantCulture, out result))
        {
            validationErrorMessage = null;
            return true;
        }
        else
        {
            validationErrorMessage = string.Format(CultureInfo.InvariantCulture, ParsingErrorMessage, DisplayName ?? FieldIdentifier.FieldName);
            return false;
        }
    }
}
