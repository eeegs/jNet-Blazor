@namespace jNet.Blazor.Parts
@using System.Drawing
@using System.Text.RegularExpressions
@using System.Diagnostics.CodeAnalysis
@inherits MyInputBase<Color>
<label for="@Id">@Label</label>
<input type="color" @attributes=Attributes class=@CssClass @bind=CurrentValueAsString />
@code {

    public static string ColorToString(Color value) => $"#{value.R:x2}{value.G:x2}{value.B:x2}";

    protected override string FormatValueAsString(Color value) => ColorToString(value);

    static byte HexStringToByte(string hex)
    {
        const string HexChars = "0123456789abcdef";
        hex = hex.ToLowerInvariant();
        int result = (HexChars.IndexOf(hex[0]) * 16) + HexChars.IndexOf(hex[1]);
        return (byte)result;
    }


    static Regex Regex = new Regex("^#([0-9a-f]{2}){3}$", RegexOptions.Compiled | RegexOptions.IgnoreCase);

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out Color result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        validationErrorMessage = null;
        Match match = Regex.Match(value ?? "");
        if (!match.Success)
        {
            validationErrorMessage = "Not a valid color code";
            result = Color.Red;
            return false;
        }

        byte r = HexStringToByte(match.Groups[1].Captures[0].Value);
        byte g = HexStringToByte(match.Groups[1].Captures[1].Value);
        byte b = HexStringToByte(match.Groups[1].Captures[2].Value);

        result = Color.FromArgb(r, g, b);
        return true;
    }
}


